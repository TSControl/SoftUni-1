// 1. Reverse Strings
using System;
using System.Collections.Generic;

var input = Console.ReadLine();
var stack = new Stack<char>();
foreach (var ch in input)
{
  stack.Push(ch);
}
while (stack.Count != 0)
{
  Console.Write(stack.Pop());
}
Console.WriteLine();

// 2. Simple Calculator
using System;
using System.Collections.Generic;
using System.Linq;

class StartUp
{
    static void Main(string[] args)
    {
        var input = Console.ReadLine();
        var values = input.Split();
        var stack = new Stack<string>(values.Reverse());
        while (stack.Count > 1)
        {
            int first = int.Parse(stack.Pop());
            String op = stack.Pop();
            int second = int.Parse(stack.Pop());
            switch(op)
            {
                case "+":
                    stack.Push((first + second).ToString());
                    break;
                case "-":
                    stack.Push((first - second).ToString());
                    break;
            }
        }
        Console.WriteLine(stack.Pop());
    }
}

// 3. Decimal to Binary Converter
using System;
using System.Collections.Generic;

class StartUp
{
    static void Main(string[] args)
    {
        var decimalNumber = int.Parse(Console.ReadLine());
        var stack = new Stack<int>();
        if (decimalNumber == 0)
        {
            Console.WriteLine(0);
            return;
        }
        while (decimalNumber != 0)
        {
            stack.Push(decimalNumber % 2);
            decimalNumber /= 2;
        }
        while (stack.Count != 0)
        {
            Console.Write(stack.Pop());
        }
        Console.WriteLine();

    }
}

// 4. Matching Brackets
using System;
using System.Collections.Generic;

class StartUp
{
    static void Main(string[] args)
    {
        var input = Console.ReadLine();
        var stackOpenBracketIndexes = new Stack<int>();
        for (int i = 0; i < input.Length; i++)
        {
            if (input[i] == '(')
            {
                stackOpenBracketIndexes.Push(i);
            }
            else if (input[i] == ')')
            {
                var n = stackOpenBracketIndexes.Pop();
                Console.WriteLine(input.Substring(n, i - n + 1));
            }
        }
    }
}

// 5. Hot Potato
using System;
using System.Collections.Generic;

class StartUp
{
    static void Main(string[] args)
    {
        var children = Console.ReadLine().Split();
        var tossLimit = int.Parse(Console.ReadLine());
        var queue = new Queue<String>(children);
        while (queue.Count > 1)
        {
            for (int tossCounter = 1; tossCounter < tossLimit; tossCounter++)
            {
                queue.Enqueue(queue.Dequeue());
            }
            Console.WriteLine("Removed " + queue.Dequeue());
        }
        Console.WriteLine($"Last is {queue.Dequeue()}");
    }
}

// 6. Traffic Jam
using System;
using System.Collections.Generic;

class StartUp
{
    static void Main(string[] args)
    {
        var countToPass = int.Parse(Console.ReadLine());
        var queue = new Queue<string>();
        var input = Console.ReadLine();
        var countPassed = 0;
        while (input != "end")
        {
            if (input == "green")
            {
                var carsToPass = Math.Min(countToPass, queue.Count);
                for (int i = 0; i < carsToPass; i++)
                {
                    Console.WriteLine($"{queue.Dequeue()} passed!");
                    countPassed++;
                }
                
            }
            else
            {
                queue.Enqueue(input);
            }
            input = Console.ReadLine();
        }
        Console.WriteLine($"{countPassed} cars passed the crossroads.");
    }
}