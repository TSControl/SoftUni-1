// 01. Followers
function getFollowers(strArr) {
    let followersMap = new Map();
    let followingMap = new Map();
    let users = [];

    for (let str of strArr) {
        let tokens = str.trim().split(' ');
        
        if (tokens.length === 2) {
            let newUser = tokens[1];

            if (users.indexOf(newUser) === -1) {
                users.push(newUser);
                followersMap.set(newUser, []);
                followingMap.set(newUser, []);
            }
        } else {
            let followingUser = tokens[0];
            let followedUser = tokens[2];

            if (followingUser !== followedUser && users.indexOf(followingUser) !== -1 && users.indexOf(followedUser) !== -1) {
                if (followersMap.get(followedUser).indexOf(followingUser) === -1)
                    followersMap.get(followedUser).push(followingUser);

                if (followingMap.get(followingUser).indexOf(followedUser) === -1)
                    followingMap.get(followingUser).push(followedUser);
            }
        }
    }

    console.log(`Total users registered: ${users.length}`);
    
    let followedOrderedArr = [...followersMap].sort((el1, el2) => el2[1].length - el1[1].length !== 0 ? el2[1].length - el1[1].length : el2[0].localeCompare(el1[0]));
    let mostFollowedUser = followedOrderedArr[0][0];
    
    console.log(`1. ${mostFollowedUser} : ${followingMap.get(mostFollowedUser).length} following, ${followersMap.get(mostFollowedUser).length} followers`);
    
    let orderedFollowers = followersMap.get(mostFollowedUser).sort((a, b) => a.localeCompare(b));
    for (let followerName of orderedFollowers)
        console.log(`*  ${followerName}`);

    followedOrderedArr.shift();

    let n = 1;
    for (let arr of followedOrderedArr) {
        let user = arr[0];
        console.log(`${++n}. ${user} : ${followingMap.get(user).length} following, ${followersMap.get(user).length} followers`);
    }
}

// 02. Travellers Log - for the love of God, I can't make this shitty problem 100/100 (even the best git hub solution I found was 80/100)
function generateLog(strArr) {
    let travelers = [];

    for (let str of strArr) {
        let tokens = str.split(' ');
        let name = tokens[0];

        if (tokens.length === 3) {
            let cash = +tokens[2];

            if (travelers.filter(o => o.name === name).length === 0)
                travelers.push({name: name, money: cash, countryMap: new Map()});
            else
                travelers.find(o => o.name === name).money += cash;
        } else {
            let landmark = tokens[3];
            let country = tokens[5];
            let price = +tokens[7];

            if (travelers.filter(o => o.name === name).length === 0) {
                travelers.push({name: name, money: 0, countryMap: new Map()});

                console.log(`Not enough money to visit ${landmark}`);
                continue;
            }

            let traveler = travelers.filter(o => o.name === name)[0];

            if (traveler.money < price) {
                console.log(`Not enough money to visit ${landmark}`);
                continue;
            }

            traveler.money -= price;

            if (!traveler.countryMap.has(country))
                traveler.countryMap.set(country, [landmark]);
            else if (traveler.countryMap.get(country).indexOf(landmark) === -1)
                    traveler.countryMap.get(country).push(landmark);
        }
    }

    travelers.sort((a, b) => b.countryMap.size - a.countryMap.size);

    for (let traveler of travelers) {
        console.log(`${traveler.name} visited ${traveler.countryMap.size} countries and has ${traveler.money} money left`);

        let sortedCountries = [...traveler.countryMap].sort((a, b) => b["1"].length - a["1"].length);
        for (let country of sortedCountries) {
            console.log(`- ${country["0"]} -> ${country["1"].length} landmarks`);

            let sortedLandmarks = country["1"].sort((a, b) => a.localeCompare(b));
            for (let landmark of sortedLandmarks) {
                console.log(`-- ${landmark}`);
            }
        }
    }
}

// 03. School Grades
function generateLog(strArr) {
    let map = new Map();

    for (let str of strArr) {
        let tokens = str.split(', ');
        let tokens1 = tokens[0].split(' ');
        let tokens2 = tokens[1].split(' ');
        let tokens3 = tokens[2].split(' ');

        let name = tokens1[2];
        let grade = +tokens2[1] + 1;
        let score = +tokens3[5];

        if (score < 3)
            continue;

        if (!map.has(grade))
            map.set(grade, []);

        map.get(grade).push({name, score});
    }

    let orderedGrades = [...map.keys()].sort((a, b) => a - b);

    for (let grade of orderedGrades) {
        console.log(`${grade} Grade`);

        console.log(`List of students: ${map.get(grade).map(obj => obj['name']).join(', ')}`);

        let totalAnnualGrade = map.get(grade).map(obj => obj['score']).reduce((acc, val) => acc + val);
        let studentCount = map.get(grade).map(obj => obj['name']).length;
        let averageAnnualGrade = totalAnnualGrade / studentCount;

        console.log(`Average annual grade from last year: ${averageAnnualGrade.toFixed(2)}`);
        console.log();
    }
}

// 04. Browser Logger
function generateLog(obj, strArr) {
    let browserName = obj['Browser Name'];
    let openTabs = obj['Open Tabs'];
    let recentlyClosed = obj['Recently Closed'];
    let browserLogs = obj['Browser Logs'];

    for (let str of strArr) {
        let tokens = str.split(' ');
        let command = tokens[0];
        let argument = tokens[1];

        switch (command) {
            case 'Open':
            openTabs.push(argument);
            browserLogs.push(str);
            break;
            case 'Close':
            if (openTabs.includes(argument)) {
                let indexToBeRemoved = openTabs.indexOf(argument);
                openTabs.splice(indexToBeRemoved, 1);
                recentlyClosed.push(argument);

                browserLogs.push(str);
            }
            break;
            case 'Clear':
            openTabs = [];
            recentlyClosed = [];
            browserLogs = [];
            break;
        }
    }

    console.log(browserName);
    console.log(`Open Tabs: ${openTabs.join(', ')}`);
    console.log(`Recently Closed: ${recentlyClosed.join(', ')}`);
    console.log(`Browser Logs: ${browserLogs.join(', ')}`);
}

// 05. Catalogue
function generateCatalogue(strArr) {
    function compareTwoProducts(name1, name2) {
        return name1.toLowerCase().localeCompare(name2.toLowerCase());
    }

    let productPrices = new Map();
    let productNames = [];
    let capitalLetters = [];



    for (let str of strArr) {
        let tokens = str.split(' : ');
        let productName = tokens[0];
        let productPrice = +tokens[1];
        
        productNames.push(productName);
        productPrices.set(productName, productPrice);

        let capitalLetter = productName[0].toUpperCase();
        if (!capitalLetters.includes(capitalLetter))
            capitalLetters.push(capitalLetter);
    }

    capitalLetters = capitalLetters.sort(compareTwoProducts);
    
    for (capitalLetter of capitalLetters) {
        console.log(capitalLetter);

        let filteredProductNames = productNames.filter(p => p[0].toUpperCase() === capitalLetter);
        filteredProductNames = filteredProductNames.sort(compareTwoProducts);
        
        for (let filteredProductName of filteredProductNames)
            console.log(`  ${filteredProductName}: ${productPrices.get(filteredProductName)}`);
    }
}

// 06. Flight Schedule
function scheduleFlight([arr1, arr2, arr3]) {
    let objArr = [];

    for (let str of arr1) {
        let tokens = str.split(' ');
        let flightNumber = tokens[0];
        let flightDestination = tokens[1];
        objArr.push({'Number': flightNumber,
                     'Destination': flightDestination,
                     'Status': 'Ready to fly'});
    }

    for (let str of arr2) {
        let tokens = str.split(' ');
        let flightNumber = tokens[0];
        let flightStatus = tokens[1];

        objArr.filter(o => o.Number === flightNumber).map(o => o.Status = flightStatus);
    }

    let status = arr3[0];

    objArr.filter(o => o.Status === status).map(o => 
        console.log(`{ Destination: '${o.Destination}', Status: '${status}' }`));
}