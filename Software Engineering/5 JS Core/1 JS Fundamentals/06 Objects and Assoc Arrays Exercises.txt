// 01. Heroic Inventory
function generateInventory(arr) {
    let heroArr = [];

    for (let str of arr) {
        let tokens = str.split(' / ');
        let name = tokens[0];
        let heroLvl = +tokens[1];
        let items = [];

        if (tokens.length > 2)
            items = tokens[2].split(', ');

        let hero = {
            "name": name,
            "level": heroLvl,
            "items": items
        }

        heroArr.push(hero);
    }

    let jsonOutput = JSON.stringify(heroArr);
    return jsonOutput;
}

// 02. JSON's Table
function generateHtmlFromJson(strArr) {
    let html = "<table>\n";

    for (let str of strArr) {
        let obj = JSON.parse(str);
        html += `\t<tr>\n\t\t<td>${obj.name}</td>\n\t\t<td>${obj.position}</td>\n\t\t<td>${obj.salary}</td>\n\t</tr>\n`;
    }

    html += "</table>\n";

    return html;
}

// 03. Cappy Juice
function drinkCappy(strArr) {
    let dicMl = {};
    let dicL = {};

    for (let str of strArr) {
        let tokens = str.split(' => ');
        let name = tokens[0];
        let quantity = +tokens[1];

        if (dicMl[name] === undefined)
            dicMl[name] = quantity;
        else
            dicMl[name] += quantity;

        if (dicMl[name] > 999) {
            let bottleCount = parseInt(dicMl[name] / 1000);

            dicMl[name] -= bottleCount * 1000;

            if (dicL[name] === undefined)
                dicL[name] = bottleCount;
            else
                dicL[name] += bottleCount;
        }
    }

    for (let e in dicL)
        console.log(`${e} => ${dicL[e]}`);
}

// 04. Store Catalogue
function generateCatalogue(strArr) {
    let dic = {};

    for (let str of strArr) {
        let tokens = str.split(" : ");
        let ch = tokens[0][0];
        let name = tokens[0];
        let quantity = tokens[1];

        if (dic[ch] === undefined)
            dic[ch] = {};

        dic[ch][name] = quantity;
    }

    let orderedChars = [];
    for (let ch in dic)
        orderedChars.push(ch);
    orderedChars.sort();

    for (let ch of orderedChars) {
        console.log(ch);

        let orderedNames = [];
        for (let name in dic[ch])
            orderedNames.push(name);
        orderedNames.sort();

        for (let name of orderedNames)
            console.log(`  ${name}: ${dic[ch][name]}`);
    }
}

// 05. Auto-Engineering Company
function generateInventory(strArr) {
    let dic = {};

    for (let str of strArr) {
        let tokens = str.split(" | ");
        let brand = tokens[0];
        let model = tokens[1];
        let quantity = +tokens[2];

        if (dic[brand] === undefined)
            dic[brand] = {};

        if (dic[brand][model] === undefined)
            dic[brand][model] = quantity;
        else
            dic[brand][model] += quantity;
    }

    for (let brand in dic) {
        console.log(brand);

        for (let model in dic[brand])
            console.log(`###${model} -> ${dic[brand][model]}`);
    }
}

// 06. System Components
function generateRegister(strArr) {
    function systemSorting(a, b) {
        let countA = 0;
        let countB = 0;

        for (let kvp in dic[a])
            countA++;

        for (let kvp in dic[b])
            countB++;

        if (countA > countB)
            return -1;
        else if (countA < countB)
            return 1;
        else {
            if (a.toLowerCase() > b.toLowerCase())
                return 1;
            else if (a.toLowerCase() < b.toLowerCase())
                return -1;
            else
                return 0;
        }
    }

    let dic = {};

    for (let str of strArr) {
        let tokens = str.split(' | ');
        let system = tokens[0];
        let component = tokens[1];
        let subcomponent = tokens[2];

        if (dic[system] === undefined)
            dic[system] = {};

        if (dic[system][component] === undefined)
            dic[system][component] = [];

        dic[system][component].push(subcomponent);
    }

    let systems = [];
    for (let system in dic)
        systems.push(system);

    systems.sort(systemSorting);

    for (let system of systems) {
        console.log(system);

        let componentsObj = dic[system];
        let componentsArr = [];
        for (let component in componentsObj)
            componentsArr.push(component);
        componentsArr.sort((a, b) => dic[system][b].length - dic[system][a].length);

        for (let component of componentsArr) {
            console.log("|||" + component);

            for (let subcomponent of dic[system][component])
                console.log("||||||" + subcomponent);
        }
    }
}

// 07. Usernames
function generateCatalog(strArr) {
    function sortUsernames(a, b) {
        if (a.length > b.length)
            return 1;
        else if (a.length < b.length)
            return -1;
        else {
            if (a > b)
                return 1;
            else if (a < b)
                return -1;
            else
                return 0;
        }
    }

    function getUniques(value, index, self) {
        return self.indexOf(value) === index;
    }

    let usernames = [];
    for (let str of strArr)
        usernames.push(str);
    
    let uniqueUsernames = usernames.filter(getUniques);
    uniqueUsernames.sort(sortUsernames);

    for (let username of uniqueUsernames)
        console.log(username);
}

// 08. Unique Sequences
function getUniqueSequences(strArr) {
    let matrix = [];
    function hasEqual(arr, matrix) {
        function isSame(arr1, arr2) {
            return JSON.stringify(arr1.sort()).localeCompare(JSON.stringify(arr2.sort()));
        }

        for (let arrOfMatrix of matrix) {
            if (isSame(arrOfMatrix, arr) === 0)
                return true;
        }

        return false;
    }
    for (let str of strArr) {
        let numArr = JSON.parse(str);
        if (!hasEqual(numArr, matrix))
            matrix.push(numArr);
    }

    let sortedMatrix = matrix.sort((arr1, arr2) => arr1.length - arr2.length);

    for (let arr of sortedMatrix) {
        console.log("[" + arr.sort((a, b) => b - a).join(", ") + "]");
    }
}

// 09. Arena Tier
function doArena(strArr) {
    let map = new Map();

    function haveCommonTechnique(name1, name2, dic) {
        let techniques1 = [...dic.get(name1).keys()];
        let techniques2 = [...dic.get(name2).keys()];

        for (let technique of techniques1) {
            if (techniques2.indexOf(technique) !== -1)
                return true;
        }

        return false;
    }

    function compareGladiators(name1, name2) {
        let skill1 = [...map.get(name1).values()].reduce((acc, val) => acc + val);
        let skill2 = [...map.get(name2).values()].reduce((acc, val) => acc + val);

        if (skill1 > skill2)
            return -1;
        else if (skill1 < skill2)
            return 1;
        else
            return name1.localeCompare(name2);
    }

    for (let str of strArr) {
        if (str.indexOf(" -> ") !== -1) {
            let tokens = str.split(" -> ");
            let gladiator = tokens[0];
            let technique = tokens[1];
            let skill = +tokens[2];

            if (!map.has(gladiator)) {
                map.set(gladiator, new Map());
                map.get(gladiator).set(technique, skill);
            }

            if (!map.get(gladiator).has(technique))
                map.get(gladiator).set(technique, skill);
            else {
                let oldSkill = map.get(gladiator).get(technique);
                if (oldSkill < skill)
                    map.get(gladiator).set(technique, skill);
            }
        } else if (str.indexOf(" vs ") !== -1) {
            let tokens = str.split(" vs ");
            let gladiator1 = tokens[0];
            let gladiator2 = tokens[1];
    
            if (map.has(gladiator1) && map.has(gladiator2) && haveCommonTechnique(gladiator1, gladiator2, map)) {
                let totalSkillPoints1 = [...map.get(gladiator1).values()].reduce((acc, val) => acc + val);
                let totalSkillPoints2 = [...map.get(gladiator2).values()].reduce((acc, val) => acc + val);
                
                if (totalSkillPoints1 > totalSkillPoints2)
                    map.delete(gladiator2);
                else if (totalSkillPoints2 > totalSkillPoints1)
                    map.delete(gladiator1);
            }
        } else if (str === "Ave Cesar") {
            let gladiators = [...map.keys()];
            let sortedGladiators = gladiators.sort((a, b) => compareGladiators(a, b));
            for (let gladiator of sortedGladiators) {
                console.log(`${gladiator}: ${[...map.get(gladiator).values()].reduce((acc, val) => acc + val)} skill`);
                let gladiatorTechniques = [...map.get(gladiator).keys()];
                let sortedGladiatorTechniques = gladiatorTechniques.sort((a, b) => map.get(gladiator).get(b) - map.get(gladiator).get(a));
                for (let gladiatorTechnique of sortedGladiatorTechniques)
                    console.log(`- ${gladiatorTechnique} <!> ${map.get(gladiator).get(gladiatorTechnique)}`);
            }
        }
    }
}

// 10. Game Of Epicness
function printWinner(objArr, matrix) {
    function sortingKingdomsArr(arr1, arr2) {
        let arr1Wins = arr1[1][0];
        let arr2Wins = arr2[1][0];
        let arr1Losses = arr1[1][1];
        let arr2Losses = arr2[1][1];

        if (arr1Wins > arr2Wins)
            return -1;
        else if (arr1Wins < arr2Wins)
            return 1;
        else {
            if (arr1Losses > arr2Losses)
            return 1;
        else if (arr1Losses < arr2Losses)
            return -1;
        else
            return arr1[0].localeCompare(arr2[0]);
        }
    }

    let map = new Map();
    let trackingMap = new Map();

    for (let obj of objArr) {
        let kingdom = obj.kingdom;
        let general = obj.general;
        let army = obj.army;

        if (!map.has(kingdom))
            map.set(kingdom, new Map());

        if (!map.get(kingdom).has(general))
            map.get(kingdom).set(general, army);
        else {
            let oldValue = map.get(kingdom).get(general);
            map.get(kingdom).set(general, army + oldValue);
        }

        if (!trackingMap.has(kingdom))
            trackingMap.set(kingdom, new Map());
        if (!trackingMap.get(kingdom).has(general))
            trackingMap.get(kingdom).set(general, [0, 0]);
    }

    for ([attackingKingdom, attackingGeneral, defendingKingdom, defendingGeneral] of matrix) {
        if (attackingKingdom === defendingKingdom)
            continue;

        let attackingArmy = map.get(attackingKingdom).get(attackingGeneral);
        let defendingArmy = map.get(defendingKingdom).get(defendingGeneral);
        let attackerWins = trackingMap.get(attackingKingdom).get(attackingGeneral)[0];
        let attackerLoses = trackingMap.get(attackingKingdom).get(attackingGeneral)[1];
        let defenderWins = trackingMap.get(defendingKingdom).get(defendingGeneral)[0];
        let defenderLoses = trackingMap.get(defendingKingdom).get(defendingGeneral)[1];

        if (attackingArmy > defendingArmy) {
            map.get(attackingKingdom).set(attackingGeneral, Math.floor(attackingArmy * 1.1));
            map.get(defendingKingdom).set(defendingGeneral, Math.floor(defendingArmy * 0.9));

            trackingMap.get(attackingKingdom).set(attackingGeneral, [attackerWins + 1, attackerLoses]);
            trackingMap.get(defendingKingdom).set(defendingGeneral, [defenderWins, defenderLoses + 1]);
        } else if (attackingArmy < defendingArmy) {
            map.get(attackingKingdom).set(attackingGeneral, Math.floor(attackingArmy * 0.9));
            map.get(defendingKingdom).set(defendingGeneral, Math.floor(defendingArmy * 1.1));

            trackingMap.get(attackingKingdom).set(attackingGeneral, [attackerWins, attackerLoses + 1]);
            trackingMap.get(defendingKingdom).set(defendingGeneral, [defenderWins + 1, defenderLoses]);
        }
    }
    let kingdoms = [...trackingMap.keys()];
    let kingdomTotalWinsAndLossesMap = new Map();
    for (let kingdom of kingdoms) {
        if (!kingdomTotalWinsAndLossesMap.has(kingdom))
            kingdomTotalWinsAndLossesMap.set(kingdom, [0, 0]);
        let kvps = trackingMap.get(kingdom);
        for (let general of kvps.keys()) {
            [wins, losses] = trackingMap.get(kingdom).get(general);
            [oldWins, oldLosses] = kingdomTotalWinsAndLossesMap.get(kingdom);
            kingdomTotalWinsAndLossesMap.set(kingdom, [oldWins + wins, oldLosses + losses]);
        }
    }
    let kingdomTotalWinsAndLossesArr = [...kingdomTotalWinsAndLossesMap];
    kingdomTotalWinsAndLossesArr.sort(sortingKingdomsArr);
    let winnerKingdomName = kingdomTotalWinsAndLossesArr[0][0];
    console.log(`Winner: ${winnerKingdomName}`);
    let generalKvps = [...map.get(winnerKingdomName)];
    generalKvps.sort((a1, a2) => a2[1] - a1[1]);
    for (let generalKvp of generalKvps) {
        console.log(`/\\general: ${generalKvp[0]}`);
        console.log(`---army: ${generalKvp[1]}`);
        console.log(`---wins: ${trackingMap.get(winnerKingdomName).get(generalKvp[0])[0]}`);
        console.log(`---losses: ${trackingMap.get(winnerKingdomName).get(generalKvp[0])[1]}`);
    }
}