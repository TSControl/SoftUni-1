// 01. Notes
function addSticker() {
    let titleInput = $('.title');
    let textInput = $('.content');
    let title = titleInput.val();
    let text = textInput.val();
    let note = $('<li class="note-content">');
    let noteTitle = `<h2>${title}</h2><hr><p>${text}</p></li>`;
    let delBtn = $('<a class="button">x</a>').on('click', function () {
        $(this).parent().remove();
    });
    note.append(delBtn);
    note.append(noteTitle);
    //$('.note-content').append(delBtn);
    if (title !== '' && text !== '') {
        $('#sticker-list').append(note);
        titleInput.val('');
        textInput.val('');
    }
}
	
// 02. Calculator Class
let calc;
beforeEach(function () {
    calc = new Calculator();
});
describe('', function () {


    it('empty', function () {
        expect(calc.toString()).to.equal('empty array')
    });
    it('add', function () {
        calc.add(2);
        calc.add(4);
        calc.add('pesho');
        calc.add({});
        expect(calc.toString()).to.equal('2 -> 4 -> pesho -> [object Object]')
    });
    it('divide', function () {
        calc.add(2);
        calc.add(4);
        calc.add('pesho');
        calc.add({});
        expect(calc.divideNums()).to.equal(0.5)
    });
    it('divide empty', function () {
        expect(calc.toString()).to.equal('empty array')
    });
    it('divide by one num', function () {
        calc.add(2);
        expect(calc.divideNums()).to.equal(2)
    });
    it('divide by zero', function () {
        calc.add(2);
        calc.add(0);
        expect(calc.divideNums()).to.equal("Cannot divide by zero")
    });
    it('divide by negative', function () {
        calc.add(2);
        calc.add(-11);
        expect(calc.divideNums()).to.equal(-0.18181818181818182)
    });
    it('divide only negative', function () {
        calc.add(-12);
        calc.add(-11);
        expect(calc.divideNums()).to.equal(1.0909090909090908)
    });
    it('divide floats', function () {
        calc.add(-12.1);
        calc.add(-11.22);
        expect(calc.divideNums()).to.equal(1.0784313725490196)
    });
    it('divide more than two', function () {
        calc.add(-12);
        calc.add(12);
        calc.add(-11);
        expect(calc.divideNums()).to.equal(0.09090909090909091)
    });
    it('divide with no nums', function () {
        calc.add('wdas');
        calc.add({});
        calc.add('sda');
        expect(() => calc.divideNums().to.throw('There are no numbers in the array!'))
    });
    it('orderby nums', function () {
        calc.add(12);
        calc.add(4);
        expect(calc.orderBy()).to.equal("4, 12")
    });
    it('orderby mixed', function () {
        calc.add(12);
        calc.add(-4);
        calc.add(0);
        calc.add('pesh');
        calc.add({});
        expect(calc.orderBy()).to.equal("-4, 0, 12, [object Object], pesh")
    });
    it('orderby empty', function () {
        expect(calc.orderBy()).to.equal("empty")
    });
    it('orderby non nums', function () {
        calc.add('sad');
        calc.add({});
        calc.add('2');
        expect(calc.orderBy()).to.equal("2, [object Object], sad")
    });
    it('one elelemt arr', function () {
        calc.add(-1);
        expect(calc.toString()).to.equal('-1')
    });
});

// 03. Book Collection
class BookCollection {
    constructor(shelfGenre, room, shelfCapacity) {
        this.shelfGenre = shelfGenre;
        this.room = room;
        this.shelf = [];
        this.shelfCapacity = shelfCapacity;
    }


    get room() {
        return this._room;
    }

    set room(value) {
        if (value === 'livingRoom' || value === 'bedRoom' || value === 'closet') {
            this._room = value;
        }
        else {
            throw new Error(`Cannot have book shelf in {room's name}`);
        }

    }

    get shelfCondition(){
        let empty=this.shelfCapacity-this.shelf.length;
        if (empty>=0){
            return empty;
        }
    }

    toString(){
        if (this.shelf.length===0){
            return 'It\'s an empty shelf'
        }else{
            let header=`"${this.shelfGenre}" shelf in ${this.room} contains:\n`;
            let books='';
            for (let book of this.shelf) {
                books+=`\uD83D\uDCD6 "${book.bookName}" - ${book.bookAuthor}\n`
            }

            return header+books.trimRight();
        }
    }

    addBook(bookName, bookAuthor, genre){
        if (this.shelf.length<this.shelfCapacity){
            this.shelf.push({bookName,bookAuthor,genre})
        }
        else{
            this.shelf.splice(0,1);
            this.shelf.push({bookName,bookAuthor,genre})

        }
         this.shelf=this.shelf.sort((a,b)=>a.bookAuthor>b.bookAuthor);
        //this.shelf=this.shelf.sort(function(a,b) {return (a.bookAuthor > b.bookAuthor) ? 1 : ((b.bookAuthor > a.bookAuthor) ? -1 : 0);} );

        return this
    }
    throwAwayBook(bookName){
        for (let i = 0; i < this.shelf.length; i++) {
            if (this.shelf[i].bookName===bookName){
                this.shelf.splice(i,1)
            }
        }
    }

    showBooks(genre){
        let allGender=this.shelf.filter((a => a.genre===genre));
        let result=`Results for search "${genre}":\n`;
        let books='';
        for (let book of allGender) {
            books+=`\uD83D\uDCD6 ${book.bookAuthor} - "${book.bookName}"\n`;
        }

        return result+books.trimRight();

    }

}

// 04. Online Shop
function onlineShop(selector) {
    let form = `<div id="header">Online Shop Inventory</div>
    <div class="block">
        <label class="field">Product details:</label>
        <br>
        <input placeholder="Enter product" class="custom-select">
        <input class="input1" id="price" type="number" min="1" max="999999" value="1"><label class="text">BGN</label>
        <input class="input1" id="quantity" type="number" min="1" value="1"><label class="text">Qty.</label>
        <button id="submit" class="button" disabled>Submit</button>
        <br><br>
        <label class="field">Inventory:</label>
        <br>
        <ul class="display">
        </ul>
        <br>
        <label class="field">Capacity:</label><input id="capacity" readonly>
        <label class="field">(maximum capacity is 150 items.)</label>
        <br>
        <label class="field">Price:</label><input id="sum" readonly>
        <label class="field">BGN</label>
    </div>`;
    $(selector).html(form);
    // Write your code here
    $(".custom-select").on('change', function () {
        // console.log(submitVal);
        let submVal = $(".custom-select").val();
        // console.log(submVal);
        // if (submVal !== '') {
        $("#submit").prop('disabled', false)
        // }
    });
    let totalPrice = 0;
    let capacity = 0;
    $('#submit').on('click', function () {
        // console.log('sdaaaa');
        let prodName = $(".custom-select").val();
        let price = $('#price').val();
        let quantity = $('#quantity').val();
        // console.log(prodName);
        // console.log(price);
        // console.log(quantity);
        totalPrice += Number(price);
        capacity += Number(quantity);
        $(".custom-select").val('');
        $('#price').val('1');
        $('#quantity').val('1');
        $("#submit").prop('disabled', true);

        if (capacity < 150) {
            $('.display').append($(`<li>Product: ${prodName} Price: ${price} Quantity: ${quantity}</li>`))
            $('#sum').val(`${totalPrice}`);
            $('#capacity').val(`${capacity}`);

            //for 80-100/100
            // if (capacity===150){
            //     $('#capacity').addClass('fullCapacity').val('full');
            //     $(".custom-select").prop('disabled', true);
            //     $("#price").prop('disabled', true);
            //     $("#quantity").prop('disabled', true);
            // }

        } else if (capacity >= 150) {

            $('#capacity').addClass('fullCapacity').val('full');
            $(".custom-select").prop('disabled', true);
            $("#price").prop('disabled', true);
            $("#quantity").prop('disabled', true);

        }
    })
}