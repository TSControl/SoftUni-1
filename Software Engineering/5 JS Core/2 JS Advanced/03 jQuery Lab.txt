// 01. Text from List

function extractText() {
  let outputText = [...$('ul#items li')].map(el => el.textContent).join(', ');
  $('#result').text(outputText);
}

// 02. Search in List
function search() {
  let pattern = $('input#searchText').val();
  
  let matchingTowns = $(`ul#towns li:contains('${pattern}')`);

  matchingTowns.css('font-weight', 'bold');

  $('#result').text(matchingTowns.length + ' matches found.');
}

// 03. Countries Table - I had to peek the presentation slution, its fucking impossible to improvise and lack of suggestions on typing doesnt help... C# RULZ
function initializeTable() {
    $("#createLink").on("click", clickCreate);

    function clickCreate() {
        let country = $("#newCountryText").val();
        let capital = $("#newCapitalText").val();
        let td1 = $('<td>');
        let td2 = $('<td>');

        td1.text(country);
        td2.text(capital);

        let tr = $('<tr>');
        tr
            .append(td1)
            .append(td2)
            .append($('<td>')
                .append($('<a href="#">[Up]</a>').on('click', clickUp))
                .append($('<a href="#">[Down]</a>').on('click', clickDown))
                .append($('<a href="#">[Delete]</a>').on('click', clickDelete)));

        $("#countriesTable").append(tr);

        $("#newCountryText").val('');
        $("#newCapitalText").val('');

        removeUpOrDown();
    }

    function removeUpOrDown() {
        $('#countriesTable a').css('display', 'inline');
        let trs = $("#countriesTable tr");
        $(trs[2]).find("a:contains('Up')").css('display', 'none');
        $(trs[trs.length - 1]).find("a:contains('Down')").css('display', 'none');
    }

    function clickUp() {
        let row = $(this).parent().parent();
        row.insertBefore(row.prev());
        removeUpOrDown();
    }

    function clickDown() {
        let row = $(this).parent().parent();
        row.insertAfter(row.next());
        removeUpOrDown();
    }

    function clickDelete() {
        let rowToRemove = $(this).parent().parent();
        rowToRemove.remove();
        removeUpOrDown();
    }

    $("#newCountryText").val('Bulgaria');
    $("#newCapitalText").val('Sofia');
    clickCreate();
    $("#newCountryText").val('Germany');
    $("#newCapitalText").val('Berlin');
    clickCreate();
    $("#newCountryText").val('Russia');
    $("#newCapitalText").val('Moscow');
    clickCreate();
}

//04. Link Buttons
function attachEvents() {
    $(".button").on("click", doShitOnButton);

    function doShitOnButton() {
        $(".button").removeClass('selected');
        $(this).addClass('selected');
    }
}

//05. Selectable Towns
function attachEvents() {
    $('#items li').on('click', changeColor);

    function changeColor() {
        let li = $(this);
        if (li.attr('data-selected')) {
            li.removeAttr('data-selected');
            li.css('background', '')
        } else {
            li.attr('data-selected', 'true');
            li.css('background', '#DDD');
        }
    }

    $('#showTownsButton').on('click', showTowns);

    function showTowns() {
        let itemToPutTownsIn = $('#selectedTowns');
        console.log(Array.from($('#items li')));
        let townNames = Array.from($('#items li')).filter(el => $(el).attr('data-selected')).map(el => $(el).text());
        itemToPutTownsIn.text(townNames.join(', '));
    }
}